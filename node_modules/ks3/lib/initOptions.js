const ms = require('humanize-ms');
const urlUtil = require('url')
function setEndpoint ({ endpoint, internal }) {
    let ep = ''
    const url = urlUtil.parse(endpoint)
    const isFullUrl = endpoint.startsWith('http')

    if (isFullUrl) {
        ep = `${url.host}`
    } else {
        ep = `${endpoint}`
    }

    let suffix = '.ksyuncs.com'
    if (internal) {
        ep = ep.replace(suffix, '-internal' + suffix)
    }

    return ep
}

/**
 * 检查endpoint,合法：http://xxxx.com、xxxx.com. 不合法：www.xxxx.com
 * @param {*} endpoint 
 * @returns 
 */
function checkEndpoint (endpoint) {
    return endpoint.startsWith('www')
}

/**
 * 将字符串首字母转小写，比如 Bucket --> bucket
 * @param {*} str 
 * @returns 
 */
function lowercaseFirstChar (str) {
    if (str == 'AK') return 'ak'
    if (str == 'SK') return 'sk'
    return str.charAt(0).toLowerCase() + str.slice(1)
}

/**
 * 将接收到的不同的参数转成统一的形式，比如 { AK, SK } / { ak, sk} --> {ak, sk}
 * 
 * @param {*} opt 
 * @returns 
 */
function convertDiffInitOptions (opt) {
    if (!opt) return ''

    var obj = {}
    for(var key in opt) {
        const tmpKey = lowercaseFirstChar(key)
        obj[tmpKey] = opt[key]
    }

    return obj
}

module.exports = function (options) {

    // 为了兼容性 如果options属性均为大驼峰 则转成首字母小写
    options = convertDiffInitOptions(options)

    if (!options || !options.ak || !options.sk || !options.endpoint) {
        throw new Error('require ak and sk、endpoint. visit: http://ks3.ksyun.com/doc/api/index.html. ak=AccessKeyID,sk=AccessKeySecret');
    }

    if (checkEndpoint(options.endpoint)) {
        throw new Error('endpoint should be host or http url')
    }

    const opt = Object.assign({
        ak: '',
        sk: '',
        bucket: '',
        region: 'BEIJING',// 只参与计算，目前可不填
        endpoint: '', // 不需要http://，只填写host即可
        timeout: 1000 * 60 * 60, // 超时时间，默认值为1h，单位为毫秒。
        internal: false, // 是否使用内网
        domainMode: false, // 是否支持上传自定义域名，默认值为false。
        secure: false, // 设置secure为true，则使用HTTPS；设置secure为false，则使用HTTP
        securityToken: '' // 临时角色token
    }, options)

    opt.ak = opt.ak.trim()
    opt.sk = opt.sk.trim()

    if (opt.timeout) {
        opt.timeout = ms(opt.timeout)
    }

    if (!opt.domainMode) {
        const param = {
            endpoint: opt.endpoint, 
            internal: opt.internal
        }
        opt.endpoint = setEndpoint(param)
    }

    opt.inited = true

    // bucket更替为bucketName
    opt.bucketName = opt.bucket
    delete opt.bucket
    
    return opt
}