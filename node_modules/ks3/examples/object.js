
var KS3 = require('..');
const { ak, sk, bucketName, region } = require('./const');

var path = require('path');
var fs = require('fs');
var mime = require('mime');
var util = require('../lib/util')
var config = require('../config')
var request = require('../lib/request');
var key = 'a.mp4';
var bigFile = path.join(__dirname, '../test/assets/' + key);

var filePath = bigFile;
var fileName = (function(){
	var s = filePath.split('/');
	return s[s.length-1];
})();

var cb = function (err, data, res, body) {
    console.log('==========> err:', err)
    console.log('==========> data:', JSON.stringify(data))
    console.log('==========> statusCode:', res.statusCode)
    console.log('==========> body:', body)

    console.log('==========> meta:', util.getObjectMetadata(res))
}

// 准备工作
// var key = `test2_${fileName}`;

var client = new KS3(ak, sk, bucketName, region);

var chunkSize = config.chunkSize

var stat = fs.statSync(filePath)
var fileSize = stat.size;
// 总块数
var count = parseInt(fileSize / chunkSize) + ((fileSize % chunkSize == 0 ? 0: 1));

// 文件类型
var contentType = mime.lookup(key)


var uploadId = 'fb5f9b287a894b8da0608777b10853b5'

// 上传
function upload () {
    const headers = {
        'x-kss-server-side-encryption': 'AES256'
    } 
    const initParams = { Key: key, Bucket: bucketName, headers }
    client.object.multitpart_upload_init( initParams, function(err, data, res) {

        // data = util.xml2json.parser(data)

        uploadId = data.InitiateMultipartUploadResult.UploadId
        console.log(`获取到上传id： ${uploadId}`)
        client.config({
            dataType: 'xml'
        });

        let chunkNum = 0;

        let etags = []

        console.log('开始分块上传...')

        up();

        function up () {
            let start = chunkNum * chunkSize
            console.log(`开始上传 第${chunkNum} 块文件...`)
            // 是否全部上传
            if (chunkNum < count) {
                util.getChunk(filePath, chunkSize, start, function (buffer) {
                    const params = {
                        Bucket: bucketName,
                        Key: key,
                        UploadId: uploadId,
                        PartNumber: chunkNum + 1, // 传值从1开始
                        body: buffer,
                        type: contentType,
                        headers
                    }
                    console.log('分块上传参数：', params)
                    client.config({
                        isDebug: true
                    })
                    client.object.upload_part(params, function(err, data, res) {
                        if (err) {
                            if (err.code === 404) {
                                throw new Error(data)
                            } else {
                                throw err;
                            }
                        } else {
                            const etag = res.headers.etag;
                            console.log(`上传成功，获取etag信息：${etag}`)
                            etags.push(etag)
                            chunkNum++;
                            up();
                        }
                    })
                })
            } else {
                // 合并上传的分块
                const params = {
                    Bucket: bucketName,
                    Key: key,
                    PartNumber: count,
                    type: contentType,
                    UploadId: uploadId,
                    body: util.generateCompleteXML(etags),
                    headers
                }
                console.log('合并参数：', params)
                client.object.upload_complete(params, function(err, data, res) {
                    if (err) throw err;
                    console.log('上传成功，合并文件：', err, data )
                })
            }
        }
    });
}

function queryChunks () {
    const params = {
        Key: key,
        Bucket: bucketName,
        UploadId: uploadId
    }
    client.object.upload_list_part(params, function (err, data, res) {
        console.log(err)
        console.log('data:', data)
        const json = convert.xml2json(data)
        const final = util.getETagsFromXml(data)
        console.log('final:', final)
    })
}

function resume () {
    client.object.resume_upload({
        Key: key, Bucket: bucketName,
        filePath,
        resumeUploadId: '2b8f5775acb14f57a1340c40b1c2165b',
        resumeNo: 30
    }, function (done, total) {
        console.log('done, total: ', done, total)
    })
    
}

// 复制object
function copy () {
    client.object.copy({
        destinationBucket: bucketName,
        destinationObject: 'copy-sse-s3-a.mp4', 
        sourceBucket: bucketName,
        sourceKey: 'new-sse-s3-a.mp4'
    }, cb)
}


// 解冻object
function restore () {
    client.object.restore({
        Bucket: bucketName,
        Key: '12.jpg'
    }, cb)
}


function rename () {
    client.object.rename({
        // Bucket: bucketName,
        Key: 'sse-s3-a.mp4',
        newKey: 'new-sse-s3-a.mp4'
    }, cb)
}

function modifyStorageClass () {
    client.object.modifyStorageClass({
        Bucket: bucketName,
        Key: 'sse-s3-a.mp4',
        storageClass: 'STANDARD'
    }, cb)
}

var key = "stream.mp4"

function getACLType () {
    client.object.getACLType({
        Bucket: bucketName,
        Key: key,
    }, cb)
}


function generateUrl () {
    client.object.generatePresignedUrl({
        Bucket: bucketName,
        Key: key,
        Expiration: 5 * 60
    }, function (res, data) {
        console.log('url: ', data)
    })
}

// 生成上传外链
function generateUploadUrl () {
    client.config({
        isDebug: true
    })
    client.object.generatePresignedUrl({
        Bucket: bucketName,
        Key: key,
        Expiration: 5 * 60,
        Method: 'PUT'
    }, function (err, data) {
        console.log(data)
    })
}

function getAcl () {
    client.object.getAcl({
        Bucket: bucketName,
        Key: key
    }, cb)
}


// key = '#####.png'
function head () {
    client.object.head({
        Key: key,
        IfModifiedSince: 'Wed, 10 Apr 2022 08:26:32 GMT'
    }, cb)
}


function getObjectTagging () {
    client.object.getObjectTagging({
        Key: key
    }, cb)
}

function deleteObjectTagging () {
    client.object.deleteObjectTagging({
        Key: key
    }, cb)
}

function putObjectTagging () {
    const tags = [{
        key: 's',
        value: 'asd'
    }, {
        key: 'string1',
        value: 'string'
    }, {
        key: 'string2',
        value: 'string'
    }, {
        key: 'string3',
        value: 'string'
    }, {
        key: 'string4',
        value: 'string'
    }, {
        key: 'string5',
        value: 'string'
    }, {
        key: 'string6',
        value: 'string'
    }, {
        key: 'string7',
        value: 'string'
    }, {
        key: 'string8',
        value: 'string'
    }, {
        key: 'string9',
        value: 'string'
    }]
    client.object.putObjectTagging({
        Key: key,
        Taggings: tags
    }, cb)
}


function putStream () {

    const fout = fs.createReadStream(filePath)
    const stat = fs.statSync(filePath)
    client.object.put({
        Key: 'stream.mp4',
        Body: fout,
        headers: {
            'Content-Length': stat.size,
            'x-kss-server-side-encryption': 'AES256'
        }
    }, cb)

}

function putString () {
    var buf = new Buffer('<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8" /><title>测试</title></head><body>testing page for gulp-ks3</body></html>');
    client.object.put({
        Key: 'put-string.html',
        Body: buf,
        headers: {
            'Content-Type':'text/html'
        }
    }, cb)
}

function putBuffer () {
    client.object.put({
        Key: 'put-buffer',
        Body: new Buffer('this is a buffer content')
    }, cb)
}


// set callback
function putCallBack () {
    const fout = fs.createReadStream(filePath)
    const param = {
        Key: 'callback.mp4',
        Body: fout,
        headers: {
            "x-kss-callbackurl":"",
            'x-kss-callbackbody': 'etag=${etag}&objectSize=${objectSize}&key=${key}',
            'x-kss-callbackauth': '1',
            'kss-location': 'test'
        }
    }
    client.object.put(param, cb)
}

/**
 * 外链上传测试
 */
function uploadByUrl () {
    const body = fs.createReadStream(filePath)
    const stat = fs.statSync(filePath)
    client.object.generatePresignedUrl({
        Bucket: bucketName,
        Key: '/aaaa/url-upload.mp4',
        expiration: 5 * 60,
        method: 'put'
    }, function (res, data) {
        console.log('url: ', data)
        request({
            method: 'put',
            uri: data,
            headers: {
                'Content-Length': stat.size
            }
        }, body, '', cb);
    })
}


/**
 * upload a object with content type && get the object
 */
function getContentType () {
    var buf = new Buffer('<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8" /><title>测试</title></head><body>testing page for gulp-ks3</body></html>');
    var key = 'test_buffer';
    client.object.put({
            Key: key,
            Body: buf,
            headers: {
                'Content-Type':'text/html'
            }
        },
        function(err, data, res) {
            if(err) throw err
            client.object.get({
                Bucket:bucketName,
                Key:key
            },function(err,data,res){
                const contentType = res.caseless.get('content-type')
                console.log(contentType)
            });
        }
    );
}

function getRangeData () {
    client.object.get({
        Key: 'dat',
        headers: {
            Range: 'bytes=0-9'
        }
    }, function (err, data, res) {
        console.log(res.caseless.get('content-length'))
        console.log(data)
    })
}

function encryptionSSES3 () {
    client.object.put({
        FilePath: filePath,
        Key: 'sse-s3-a.mp4',
        ServerSideEncryption: 'AES256'
    }, cb)
}

// upload()
copy();
// restore();
// rename();
// modifyStorageClass();
// getACLType();
// generateUrl();
// generateUploadUrl()
// getAcl()
// head()
// putObjectTagging()
// getObjectTagging()
// deleteObjectTagging()
// putStream()
// putString()
// putBuffer()
// putCallBack()
// uploadByUrl()
// getContentType()
// getRangeData ()
// encryptionSSES3()